#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

: ${CORE_VERSION:="1.0.3"}
: ${CORE_SCRIPT_LOCATION:="https://dot.net/v1/dotnet-install.sh"}
: ${NODE_VERSION:="4.4.4"}
: ${CORE_CHANNEL:="preview"}

CORE_DOWNLOAD_LOCATION=""

if [ "${STACK}" == "cedar-14" ]; then
	echo "Stack ${STACK} is Ubuntu 14.04"
	CORE_DOWNLOAD_LOCATION="https://go.microsoft.com/fwlink/?linkid=847106"
elif [ "${STACK}" == "heroku-16" ]; then
	echo "Stack ${STACK} is Ubuntu 16.04"
	CORE_DOWNLOAD_LOCATION="https://go.microsoft.com/fwlink/?linkid=847089"
else
	echo "This stack $STACK is not supported. Please create a issue https://github.com/se/heroku-core/issues/new ."
fi

if [ "$1" == "" ]; then
	echo "Build dir is not found." && exit 1
fi

if [ "$2" == "" ]; then
	echo "Cache dir is not found." && exit 1
fi

if [ "$3" == "" ]; then
	echo "Environment dir is not found." && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
APP_DIR="/app"

echo "BUILD_DIR: ${BUILD_DIR}"
echo "CACHE_DIR: ${CACHE_DIR}"
echo "ENV_DIR: ${ENV_DIR}"
echo "APP_DIR: ${APP_DIR}"

# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

echo "Buildpack dir is : ${BUILDPACK_DIR}"

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}

if [ -n "$BUILD_DEBUG" ]; then
	CORE_CONFIGURATION="Debug"
	CORE_ENVIRONMENT="--environment Development"
else
	CORE_CONFIGURATION="Release"
	CORE_ENVIRONMENT=""
fi

SRC_DIR=`mktemp -d`
echo "Temp folder created on ${SRC_DIR}"
# Move the app source code into temporary src dir using subshell to not leak shopt
(
	shopt -s dotglob
	cp -ai ${BUILD_DIR} ${SRC_DIR}
)

mkdir -p ${CACHE_DIR}
echo "Cache folder created on ${CACHE_DIR}"

# TODO: This test doesn't seen to actually work
# TODO: Maybe just run `npm install -g` and if anything is missing, install it after
if [[ -n $(find ${SRC_DIR} -type f -iname package.json -o -iname *.csproj) ]]
then
	echo "Installing Node"
	NODE_PATH=`mktemp -d`
	curl https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz -Ls \
		| tar xz -C ${NODE_PATH}
	export PATH="${NODE_PATH}/node-v${NODE_VERSION}-linux-x64/bin:${PATH}"
	echo "Installing bower"
	if ! hash bower 2>/dev/null; then
		npm install -g bower
	fi
fi

DOTNET_PATH=`which dotnet`
DOTNET_VERSION=""
echo $DOTNET_PATH

if [ -n "$DOTNET_PATH" ]; then
    DOTNET_VERSION=`dotnet --version`
    echo "Dotnet found and version is $DOTNET_VERSION"
else
    echo "Dotnet not found."
fi

## Check if already installed.
if [ "$DOTNET_VERSION" != "$CORE_VERSION" ]; then

	if [ -n "$DOTNET_VERSION" ]; then
		echo "Your .Net Core version is old and will be upgrade from ${DOTNET_VERSION} SDK to ${CORE_VERSION} SDK."
	fi

	# Install .NET Core

	echo "Installing the dependencies"

	apt_install libunwind8 gettext
	# apt-get install cmake llvm-3.5 clang-3.5 lldb-3.6 lldb-3.6-dev libunwind8 libunwind8-dev gettext libicu-dev liblttng-ust-dev libcurl4-openssl-dev libssl-dev uuid-dev

	mkdir -p ${BUILD_DIR}/dotnet

	DL_FILE="${BUILD_DIR}/dotnet.tar.gz"

	echo "Downloading .NET CORE ${CORE_VERSION} from ${CORE_DOWNLOAD_LOCATION} to ${DL_FILE}"
	# dotnet-install.sh using `ldconfig` which search pkg in `/lib` or `/usr/lib`. So I change it to binaries.
	#curl -sSL ${CORE_SCRIPT_LOCATION} | bash /dev/stdin --version ${CORE_VERSION} --install-dir ${BUILD_DIR}/dotnet
	curl -o "${DL_FILE}" -# "${CORE_DOWNLOAD_LOCATION}" -L
	echo "Download complete."
	echo "Path is : ${DL_FILE}"
	echo "Extracting downloaded files"
	tar zxf "${DL_FILE}" -C ${BUILD_DIR}/dotnet
	echo "Done!"
else
	echo "Dotnet already installed."
fi
## Check if already installed

rm -rf ${APP_DIR}/dotnet
ln -s ${BUILD_DIR}/dotnet/dotnet ${APP_DIR}

export PATH="${BUILD_DIR}/dotnet:${PATH}"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}"

echo "All Path is : ${PATH}" 
echo "Lib Path is : ${LD_LIBRARY_PATH}" 
echo "Paths are exported."
echo "Deployment file location is ${DEPLOYMENT_FILE_LOCATION}"

PROJECT_JSON_FILES=$(find ${SRC_DIR}/. -maxdepth 5 -iname "*.csproj")
printf 'Found %s csproj files\n' $(echo "$PROJECT_JSON_FILES" | wc -l | tr -d ' ')
PROJECT_JSON_FILE=$(echo "$PROJECT_JSON_FILES" | head -1)

echo "Building ${PROJECT_JSON_FILE}"

PROJECT_DIR="$PROJECT_JSON_FILE"
if [[ -f $PROJECT_JSON_FILE ]]; then
	PROJECT_DIR=$(dirname $PROJECT_JSON_FILE)
fi

echo "Project dir is ${PROJECT_DIR}"
echo "Reading App Name from csproj"

PROJECT_DIR_NAME=$(basename $PROJECT_DIR)
PROJECT_NAME=$(awk -F '[<>]' '/AssemblyName/{print $3}' $PROJECT_JSON_FILE)

if [ -z "$PROJECT_NAME" ]; then
	echo "Assembly name not founded in csproj. Getting csproj file name."
	FULLFILENAME=$(basename $PROJECT_JSON_FILE)
	EXTRACTED_FILE_NAME="${FULLFILENAME%.*}"
	PROJECT_NAME=$EXTRACTED_FILE_NAME
fi

echo "Founded name is $PROJECT_NAME"
echo "Restoring the packages"

dotnet restore $PROJECT_DIR
# configure some npm command during building
export PATH="${PROJECT_DIR}/node_modules/.bin:${PATH}"

echo "Publishing the app"
# Publish to heroku_output
dotnet publish ${PROJECT_JSON_FILE} --output ${BUILD_DIR}/heroku_output --configuration ${CORE_CONFIGURATION}

echo "Publish Successed"

mkdir -p ${BUILD_DIR}/.profile.d
cp -n ${BUILDPACK_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/

if [ -e ${SRC_DIR}/Procfile ]; then
	cp ${SRC_DIR}/Procfile ${BUILD_DIR}
else
	cat << EOT >> ${BUILD_DIR}/Procfile
web: cd \$HOME/heroku_output && dotnet ./${PROJECT_NAME}.dll --server.urls http://+:\$PORT ${CORE_ENVIRONMENT}
EOT
fi
